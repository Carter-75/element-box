"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/app/simulation/world.ts":
/*!*************************************!*\
  !*** ./src/app/simulation/world.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DENSITIES: function() { return /* binding */ DENSITIES; },\n/* harmony export */   ELEMENT_COLORS: function() { return /* binding */ ELEMENT_COLORS; },\n/* harmony export */   ELEMENT_TYPE: function() { return /* binding */ ELEMENT_TYPE; },\n/* harmony export */   clear: function() { return /* binding */ clear; },\n/* harmony export */   getCellSize: function() { return /* binding */ getCellSize; },\n/* harmony export */   getGrid: function() { return /* binding */ getGrid; },\n/* harmony export */   init: function() { return /* binding */ init; },\n/* harmony export */   saveWorld: function() { return /* binding */ saveWorld; },\n/* harmony export */   setElement: function() { return /* binding */ setElement; },\n/* harmony export */   setWalls: function() { return /* binding */ setWalls; },\n/* harmony export */   update: function() { return /* binding */ update; }\n/* harmony export */ });\nconst ELEMENT_TYPE = {\n    EMPTY: 0,\n    WALL: 1,\n    SAND: 2,\n    WATER: 3,\n    PLANT: 4,\n    FIRE: 5,\n    LAVA: 6,\n    ACID: 7,\n    SMOKE: 8,\n    STONE: 9,\n    STONE_ASH: 10,\n    ASH: 11,\n    HOT_ASH: 12\n};\nconst ELEMENT_COLORS = {\n    [ELEMENT_TYPE.EMPTY]: \"#000000\",\n    [ELEMENT_TYPE.WALL]: \"#505050\",\n    [ELEMENT_TYPE.SAND]: \"#f0d9a5\",\n    [ELEMENT_TYPE.WATER]: \"#3498db\",\n    [ELEMENT_TYPE.PLANT]: \"#2ecc71\",\n    [ELEMENT_TYPE.FIRE]: \"#e74c3c\",\n    [ELEMENT_TYPE.LAVA]: \"#d35400\",\n    [ELEMENT_TYPE.ACID]: \"#9b59b6\",\n    [ELEMENT_TYPE.SMOKE]: \"#888888\",\n    [ELEMENT_TYPE.STONE]: \"#808080\",\n    [ELEMENT_TYPE.STONE_ASH]: \"#6b6b6b\",\n    [ELEMENT_TYPE.ASH]: \"#2b2b2b\",\n    [ELEMENT_TYPE.HOT_ASH]: \"#db4f27\"\n};\nconst DENSITIES = {\n    [ELEMENT_TYPE.EMPTY]: 0,\n    [ELEMENT_TYPE.SMOKE]: 1,\n    [ELEMENT_TYPE.FIRE]: 1,\n    [ELEMENT_TYPE.WATER]: 10,\n    [ELEMENT_TYPE.ACID]: 11,\n    [ELEMENT_TYPE.ASH]: 12,\n    [ELEMENT_TYPE.HOT_ASH]: 12,\n    [ELEMENT_TYPE.SAND]: 15,\n    [ELEMENT_TYPE.PLANT]: 20,\n    [ELEMENT_TYPE.STONE_ASH]: 22,\n    [ELEMENT_TYPE.LAVA]: 25,\n    [ELEMENT_TYPE.STONE]: 30,\n    [ELEMENT_TYPE.WALL]: Infinity\n};\nconst LOCAL_STORAGE_KEY = \"sandSimulationGrid\";\nconst CELL_SIZE = 5;\nlet width, height;\nlet grid;\nlet areWallsOn = true;\nconst setWalls = (enabled)=>{\n    areWallsOn = enabled;\n    const wallType = enabled ? ELEMENT_TYPE.WALL : ELEMENT_TYPE.EMPTY;\n    if (!grid) return;\n    for(let y = 0; y < height; y++){\n        if (grid[y]) {\n            grid[y][0] = wallType;\n            grid[y][width - 1] = wallType;\n        }\n    }\n    for(let x = 0; x < width; x++){\n        if (grid[0]) grid[0][x] = wallType;\n        if (grid[height - 1]) grid[height - 1][x] = wallType;\n    }\n};\nconst saveWorld = ()=>{\n    if (grid) {\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(grid));\n    }\n};\nconst clear = ()=>{\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            grid[y][x] = ELEMENT_TYPE.EMPTY;\n        }\n    }\n    if (areWallsOn) {\n        setWalls(true);\n    }\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n};\nconst init = (canvasWidth, canvasHeight)=>{\n    width = Math.floor(canvasWidth / CELL_SIZE);\n    height = Math.floor(canvasHeight / CELL_SIZE);\n    const savedGrid = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (savedGrid) {\n        try {\n            const parsedGrid = JSON.parse(savedGrid);\n            if (parsedGrid && parsedGrid.length === height && parsedGrid[0].length === width) {\n                grid = parsedGrid;\n                return;\n            }\n        } catch (e) {\n            console.error(\"Failed to parse saved grid:\", e);\n        }\n    }\n    grid = Array(height).fill(0).map(()=>Array(width).fill(ELEMENT_TYPE.EMPTY));\n    setWalls(areWallsOn);\n};\nconst getGrid = ()=>grid;\nconst getCellSize = ()=>CELL_SIZE;\nconst setElement = (x, y, elementType, brushSize)=>{\n    const radius = Math.floor(brushSize / CELL_SIZE / 2);\n    for(let i = -radius; i <= radius; i++){\n        for(let j = -radius; j <= radius; j++){\n            if (i * i + j * j <= radius * radius) {\n                const newX = x + i;\n                const newY = y + j;\n                if (newX >= 0 && newX < width && newY >= 0 && newY < height) {\n                    if (grid[newY][newX] === ELEMENT_TYPE.EMPTY || elementType === ELEMENT_TYPE.EMPTY) {\n                        grid[newY][newX] = elementType;\n                    }\n                }\n            }\n        }\n    }\n};\nconst move = (x1, y1, x2, y2)=>{\n    const temp = grid[y1][x1];\n    grid[y1][x1] = grid[y2][x2];\n    grid[y2][x2] = temp;\n};\nconst isWithinBounds = (x, y)=>{\n    return y >= 0 && y < height && x >= 0 && x < width;\n};\nconst isEmpty = (x, y)=>{\n    return isWithinBounds(x, y) && grid[y][x] === ELEMENT_TYPE.EMPTY;\n};\nconst is = (x, y, elementType)=>{\n    return isWithinBounds(x, y) && grid[y][x] === elementType;\n};\nconst set = (x, y, elementType)=>{\n    if (isWithinBounds(x, y)) {\n        grid[y][x] = elementType;\n    }\n};\nconst update = ()=>{\n    const updatedPositions = new Set();\n    const updateElement = (x, y)=>{\n        const pos = \"\".concat(x, \",\").concat(y);\n        if (updatedPositions.has(pos)) {\n            return; // Already updated in this frame\n        }\n        const element = grid[y][x];\n        // --- Out of Bounds Check ---\n        if (!areWallsOn) {\n            if (y <= 0 && (element === ELEMENT_TYPE.FIRE || element === ELEMENT_TYPE.SMOKE)) {\n                set(x, y, ELEMENT_TYPE.EMPTY);\n                return;\n            }\n            if (y >= height - 1 && DENSITIES[element] > DENSITIES[ELEMENT_TYPE.EMPTY]) {\n                set(x, y, ELEMENT_TYPE.EMPTY);\n                return;\n            }\n        }\n        // --- Movement Phase ---\n        // A particle will attempt to move, and if it does, its turn ends.\n        // Interactions only happen if a particle cannot move.\n        // Gas Movement (Up)\n        if (element === ELEMENT_TYPE.FIRE || element === ELEMENT_TYPE.SMOKE) {\n            const dir = Math.random() < 0.5 ? -1 : 1;\n            // Up\n            if (isEmpty(x, y - 1)) {\n                move(x, y, x, y - 1);\n                updatedPositions.add(\"\".concat(x, \",\").concat(y - 1));\n                return;\n            }\n            // Diagonal Up\n            if (isEmpty(x + dir, y - 1)) {\n                move(x, y, x + dir, y - 1);\n                updatedPositions.add(\"\".concat(x + dir, \",\").concat(y - 1));\n                return;\n            }\n            // Sideways\n            if (isEmpty(x + dir, y)) {\n                move(x, y, x + dir, y);\n                updatedPositions.add(\"\".concat(x + dir, \",\").concat(y));\n                return;\n            }\n        } else if (DENSITIES[element] > DENSITIES[ELEMENT_TYPE.EMPTY] && DENSITIES[element] < DENSITIES[ELEMENT_TYPE.WALL]) {\n            var _grid_, _grid_1, _grid_2;\n            const density = DENSITIES[element];\n            // Down\n            const below = (_grid_ = grid[y + 1]) === null || _grid_ === void 0 ? void 0 : _grid_[x];\n            if (below !== undefined && density > DENSITIES[below]) {\n                move(x, y, x, y + 1);\n                updatedPositions.add(\"\".concat(x, \",\").concat(y + 1));\n                return;\n            }\n            // Diagonal Down\n            const dir = Math.random() < 0.5 ? -1 : 1;\n            const diag1 = (_grid_1 = grid[y + 1]) === null || _grid_1 === void 0 ? void 0 : _grid_1[x + dir];\n            if (diag1 !== undefined && density > DENSITIES[diag1]) {\n                move(x, y, x + dir, y + 1);\n                updatedPositions.add(\"\".concat(x + dir, \",\").concat(y + 1));\n                return;\n            }\n            const diag2 = (_grid_2 = grid[y + 1]) === null || _grid_2 === void 0 ? void 0 : _grid_2[x - dir];\n            if (diag2 !== undefined && density > DENSITIES[diag2]) {\n                move(x, y, x - dir, y + 1);\n                updatedPositions.add(\"\".concat(x - dir, \",\").concat(y + 1));\n                return;\n            }\n            // Sideways (Liquids Only)\n            if (element === ELEMENT_TYPE.WATER || element === ELEMENT_TYPE.ACID || element === ELEMENT_TYPE.LAVA) {\n                const isSlow = element === ELEMENT_TYPE.LAVA && Math.random() < 0.5;\n                if (!isSlow) {\n                    if (isEmpty(x + dir, y)) {\n                        move(x, y, x + dir, y);\n                        updatedPositions.add(\"\".concat(x + dir, \",\").concat(y));\n                        return;\n                    }\n                    if (isEmpty(x - dir, y)) {\n                        move(x, y, x - dir, y);\n                        updatedPositions.add(\"\".concat(x - dir, \",\").concat(y));\n                        return;\n                    }\n                }\n            }\n        }\n        // --- Interaction Phase ---\n        // This code only runs if the particle did not move in the movement phase.\n        switch(element){\n            case ELEMENT_TYPE.LAVA:\n            case ELEMENT_TYPE.ACID:\n                for(let i = -1; i <= 1; i++){\n                    for(let j = -1; j <= 1; j++){\n                        var _grid_3;\n                        if (i === 0 && j === 0) continue;\n                        const neighbor = (_grid_3 = grid[y + j]) === null || _grid_3 === void 0 ? void 0 : _grid_3[x + i];\n                        if (neighbor === undefined || neighbor === ELEMENT_TYPE.WALL || neighbor === element) continue;\n                        if (is(x + i, y + j, ELEMENT_TYPE.LAVA) && element === ELEMENT_TYPE.ACID) {\n                            set(x + i, y + j, ELEMENT_TYPE.SMOKE);\n                            set(x, y, ELEMENT_TYPE.SMOKE);\n                        } else if (neighbor !== ELEMENT_TYPE.EMPTY) {\n                            set(x + i, y + j, ELEMENT_TYPE.FIRE);\n                            if (element === ELEMENT_TYPE.ACID && Math.random() < 0.2) {\n                                set(x, y, ELEMENT_TYPE.EMPTY);\n                            }\n                        }\n                    }\n                }\n                break;\n            case ELEMENT_TYPE.FIRE:\n                if (Math.random() < 0.05) {\n                    set(x, y, ELEMENT_TYPE.HOT_ASH);\n                }\n                break;\n            case ELEMENT_TYPE.HOT_ASH:\n                if (Math.random() < 0.05) {\n                    set(x, y, ELEMENT_TYPE.ASH);\n                    break;\n                }\n                for(let i = -1; i <= 1; i++){\n                    for(let j = -1; j <= 1; j++){\n                        var _grid_4;\n                        if (i === 0 && j === 0) continue;\n                        const neighbor = (_grid_4 = grid[y + j]) === null || _grid_4 === void 0 ? void 0 : _grid_4[x + i];\n                        if (neighbor === ELEMENT_TYPE.WATER) {\n                            set(x, y, ELEMENT_TYPE.ASH);\n                            set(x + i, y + j, ELEMENT_TYPE.SMOKE);\n                        } else if (neighbor !== ELEMENT_TYPE.ASH && neighbor !== ELEMENT_TYPE.HOT_ASH && DENSITIES[neighbor] > 0 && DENSITIES[neighbor] < DENSITIES[ELEMENT_TYPE.LAVA]) {\n                            if (Math.random() < 0.05) {\n                                set(x + i, y + j, ELEMENT_TYPE.FIRE);\n                                set(x, y, ELEMENT_TYPE.ASH);\n                            }\n                        }\n                    }\n                }\n                break;\n            case ELEMENT_TYPE.STONE_ASH:\n                var _grid_5;\n                const isStable = DENSITIES[(_grid_5 = grid[y + 1]) === null || _grid_5 === void 0 ? void 0 : _grid_5[x]] >= DENSITIES[ELEMENT_TYPE.STONE_ASH];\n                if (isStable && Math.random() < 0.01) {\n                    set(x, y, ELEMENT_TYPE.STONE);\n                }\n                break;\n            case ELEMENT_TYPE.PLANT:\n                if (Math.random() < 0.05) {\n                    for(let i = -1; i <= 1; i++){\n                        for(let j = -1; j <= 1; j++){\n                            if (is(x + i, y + j, ELEMENT_TYPE.WATER)) {\n                                // Try to grow into an empty space nearby\n                                const growX = x - i;\n                                const growY = y - j;\n                                if (isEmpty(growX, growY)) {\n                                    set(growX, growY, ELEMENT_TYPE.PLANT);\n                                }\n                            }\n                        }\n                    }\n                }\n                break;\n        }\n        updatedPositions.add(pos);\n    };\n    // Iterate through the grid and update elements\n    for(let y = height - 2; y > 0; y--){\n        const scanDirection = Math.random() < 0.5 ? 1 : -1;\n        if (scanDirection === 1) {\n            for(let x = 1; x < width - 1; x++){\n                updateElement(x, y);\n            }\n        } else {\n            for(let x = width - 2; x > 0; x--){\n                updateElement(x, y);\n            }\n        }\n    }\n    // Process solids (non-moving but interactive elements)\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            if (grid[y][x] === ELEMENT_TYPE.PLANT) {\n                updateElement(x, y);\n            }\n        }\n    }\n    // Iterate top-to-bottom for rising particles\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            if (grid[y][x] === ELEMENT_TYPE.SMOKE || grid[y][x] === ELEMENT_TYPE.FIRE) {\n                updateElement(x, y);\n            }\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/simulation/world.ts\n"));

/***/ })

});